parameters:
  name: ''

steps:
  - checkout: self

  - bash: ci/dev-env-install.sh
    displayName: 'Build/Install the Developer Environment'

  - bash: |
      source dev-env/lib/ensure-nix
      ci/dev-env-push.py
    displayName: 'Push Developer Environment build results'
    condition: eq(variables['System.PullRequest.IsFork'], 'False')
    env:
      # to upload to the Nix cache
      GOOGLE_APPLICATION_CREDENTIALS_CONTENT: $(GOOGLE_APPLICATION_CREDENTIALS_CONTENT)
      NIX_SECRET_KEY_CONTENT: $(NIX_SECRET_KEY_CONTENT)

#  - bash: ./fmt.sh --test
#    displayName: 'Platform-agnostic lints and checks'
#    condition: eq(variables['Agent.OS'], 'Linux')

  - bash: ci/configure-bazel.sh
    displayName: 'Configure Bazel'
    env:
      IS_FORK: $(System.PullRequest.IsFork)
      # to upload to the bazel cache
      GOOGLE_APPLICATION_CREDENTIALS_CONTENT: $(GOOGLE_APPLICATION_CREDENTIALS_CONTENT)

  - bash: ./build.sh "_$(uname)"
    displayName: 'Build'

  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'Bazel execution logs'

  - bash: curl -o $(Build.BinariesDirectory)/synopsys-detect.sh https://raw.githubusercontent.com/DACH-NY/security-blackduck/master/synopsys-detect\?token\=AYAziXvyU6XSZswdUE0nZpr4HfCYgS8qks5cugsvwA%3D%3D; $(Build.BinariesDirectory)/synopsys-detect.sh ci-build project=daml branch=blackduck --logging.level.com.blackducksoftware.integration=DEBUG --blackduck.url=https://digitalasset.blackducksoftware.com
    displayName: 'Synopsys Detect Scan'
    env:
      BLACKDUCK_HUBDETECT_TOKEN: $(BLACKDUCK_HUB_DETECT)
      DETECT_JAR_PATH: $(Build.BinariesDirectory)

  - bash: bash <(curl -s https://blackducksoftware.github.io/hub-detect/hub-detect.sh) --detect.docker.image=alpine:latest --detect.blackduck.signature.scanner.disabled=true --blackduck.blackduck.offline.mode=true --detect.docker.passthrough.imageinspector.service.start=true  --logging.level.com.blackducksoftware.integration=DEBUG --blackduck.url=https://digitalasset.blackducksoftware.com
    displayName: 'Blackduck Scan'
    env:
      BLACKDUCK_HUBDETECT_TOKEN: $(BLACKDUCK_HUB_DETECT)

  - bash: ci/release.sh
    displayName: 'Release'
    condition: eq(variables['System.PullRequest.IsFork'], 'False')
    env:
      # to connect to bintray
      JFROG_CONFIG_CONTENT: $(JFROG_CONFIG_CONTENT)
    name: release
  - bash: |
      set -euo pipefail
      ARTIFACT=daml-sdk-$(release_tag)-${{ parameters.name }}
      cp bazel-genfiles/release/sdk-release-tarball.tar.gz $(Build.StagingDirectory)/$ARTIFACT
      echo "##vso[task.setvariable variable=artifact;isOutput=true]$ARTIFACT"
    name: publish
    condition: eq(variables['release.has_released'], 'true')
  - task: PublishPipelineArtifact@0
    condition: eq(variables['release.has_released'], 'true')
    inputs:
      pathtoPublish: $(Build.StagingDirectory)/$(publish.artifact)
      artifactName: $(publish.artifact)
